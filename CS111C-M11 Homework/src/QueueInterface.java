public interface QueueInterface<T> {	/**	 * Adds a new entry to the back of this queue.	 * 	 * @param element element to be added to the queue	 */	public void enqueue(T element);	/**	 * Removes and returns the element at the front of the queue.	 * The size of the queue is decreased by one.	 * 	 * @return The element at the front of the queue	 * @throws EmptyQueueException if the queue is empty when the method is invoked	 */	public T dequeue();	/**	 * Retrieves the element at the front of this queue.	 * The size of the queue is not changed.	 * 	 * @return The element at the front of the queue.	 * @throws EmptyQueueException if the queue is empty when the method is invoked	 */	public T getFront();	/**	 * Determines if there are any elements in the queue.	 * 	 * @return True if the queue is empty.	 */	public boolean isEmpty();	/** Removes all entries from the queue. */	public void clear();		/**	 * Retrieves the element behind the front of this queue.	 * The size of the queue is not changed.	 * 	 * @return The element behind the element at the front of the queue.	 * @throws EmptyQueueException if the queue is empty when the method is invoked	 * @throws IllegalStateException if the queue is a singleton when the method is invoked	 */	public T getSecond();} 