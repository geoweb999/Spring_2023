public class Rotary extends FixedWing {

	public static final int DEFAULT_NUMBER_ENGINES = 1;
	private boolean isHovering;
	
	public Rotary(String registrationID, Location location, int soulsOnBoard, int numEngines) {
		super(registrationID, location, soulsOnBoard, numEngines);
	}

	public Rotary(String registrationID, Location location, int soulsOnBoard) {
		super(registrationID, location, soulsOnBoard, DEFAULT_NUMBER_ENGINES);
	}
	
	public boolean isHovering() {
		return isHovering;
	}
	
	public void setIsHovering(boolean isHovering) {
		this.isHovering = isHovering;
	}
	
	
	//@Override
	public boolean executeHover() {
		if (this.isAirborne()) {
			this.setIsHovering(true);
			this.setVerticalSpeed(0);
			return true;
		} else {
			System.out.println("Hover request denied.");
			return false;
		}
	}
	
	@Override
	public boolean executeLanding() {
		// check for landing permission and execute landing procedure
		if (this.requestLanding() && 
				(this.getTerrainType() == "LAND" || this.getTerrainType() == "MOUNTAIN")) {
			this.setAirSpeed(0);
			this.setThrottlePercent(0);
			this.setVerticalSpeed(0);
			this.setAirborne(false);
			this.setAltitude(0);
			this.isHovering = false;
			return true;
		} else {
			System.out.println("Landing request denied.");
			return false;
		}
	}
	
	@Override
	public boolean executeTakeoff() {
		if (this.requestTakeoff() && 
				(this.getTerrainType() == "LAND" || this.getTerrainType() == "MOUNTAIN")) {
			this.setAirSpeed(25);
			this.setThrottlePercent(100);
			this.setVerticalSpeed(1);
			this.setAirborne(true);
			this.isHovering = false;
			return true;
		} else {
			System.out.println("Takeoff request denied.");
			return false;
		}
	}
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof Rotary) {
			return super.equals(obj);
			
		} else {
			return false;
		}
	}
	
	@Override
	public String toString() {
		String hovering = (this.isHovering) ? "is hovering" : "";
		return super.toString() + " " + hovering; 
	}
}
